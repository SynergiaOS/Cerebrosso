version: '3.8'

services:
  # üóÑÔ∏è Database Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cerberus
      POSTGRES_USER: cerberus
      POSTGRES_PASSWORD: cerberus_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  # üîê Security Services
  vault:
    image: hashicorp/vault:latest
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: cerberus_root_token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config
    command: vault server -dev -dev-listen-address=0.0.0.0:8200

  # üß† Core Services
  cerebro-bff:
    build:
      context: ./services/cerebro-bff
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - HELIUS_API_KEY=${HELIUS_API_KEY:-demo}
      - QUICKNODE_RPC_URL=${QUICKNODE_RPC_URL:-https://api.devnet.solana.com}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - qdrant

  hft-ninja:
    build:
      context: ./services/hft-ninja
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - CEREBRO_BFF_URL=http://cerebro-bff:3000
      - SWARM_COORDINATOR_URL=http://swarm-coordinator:8090
      - HELIUS_WEBHOOK_SECRET=${HELIUS_WEBHOOK_SECRET:-demo}
    depends_on:
      - cerebro-bff
      - swarm-coordinator

  # üêù SwarmCoordinator - Hive Mind Central Orchestrator
  swarm-coordinator:
    build:
      context: ./services/swarm-coordinator
      dockerfile: Dockerfile
    ports:
      - "8090:8090"  # HTTP API
      - "8091:8091"  # WebSocket
    environment:
      - SWARM_HOST=0.0.0.0
      - SWARM_PORT=8090
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=swarm_memory
      - SWARM_MAX_AGENTS=40
      - SWARM_MIN_AGENTS=4
      - SWARM_DECISION_THRESHOLD=0.848
      - JWT_SECRET=${JWT_SECRET:-swarm_secret_key}
      - TRACING_LEVEL=info
    depends_on:
      - postgres
      - redis
      - qdrant
      - vault
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üëë Agent-Strateg - CEO Agent (Strategic Decision Making)
  agent-strateg:
    build:
      context: ./services/agent-strateg
      dockerfile: Dockerfile
    ports:
      - "8100:8100"  # HTTP API
    environment:
      - STRATEG_HOST=0.0.0.0
      - STRATEG_PORT=8100
      - SWARM_COORDINATOR_URL=http://swarm-coordinator:8090
      - STRATEG_AGENT_ID=strateg_1
      - REDIS_URL=redis://redis:6379
      - STRATEG_PRIMARY_MODEL=gpt-4
      - STRATEG_BACKUP_MODEL=claude-3
      - STRATEG_DECISION_WEIGHT=0.4
      - STRATEG_RISK_TOLERANCE=0.3
      - STRATEG_MAX_GOALS=5
      - STRATEG_MAX_POSITION_SOL=10.0
      - STRATEG_STOP_LOSS_PCT=0.05
      - STRATEG_TAKE_PROFIT_PCT=0.15
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo_key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-demo_key}
      - TRACING_LEVEL=info
    depends_on:
      - swarm-coordinator
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üß† Context Engine (CEM) - Advanced Context Management
  context-engine:
    build:
      context: ./services/context-engine
      dockerfile: Dockerfile
    ports:
      - "8200:8200"  # HTTP API
      - "9200:9200"  # Prometheus metrics
    environment:
      - CONTEXT_ENGINE_HOST=0.0.0.0
      - CONTEXT_ENGINE_PORT=8200
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=context_memory
      - EMBEDDING_VECTOR_SIZE=1536
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo_key}
      - ENABLE_TF_IDF=true
      - ENABLE_CLUSTERING=true
      - ENABLE_DEDUPLICATION=true
      - ENABLE_LEARNING=true
      - CONTEXT_QUALITY_THRESHOLD=0.7
      - RELEVANCE_THRESHOLD=0.5
      - LEARNING_RATE=0.01
      - SHUFFLE_HAYSTACK=true
      - CONTEXT_METRICS_ENABLED=true
      - CONTEXT_PROMETHEUS_PORT=9200
      - TRACING_LEVEL=info
    depends_on:
      - redis
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üîó Synk - Network State Synchronization
  synk:
    build:
      context: ./services/synk
      dockerfile: Dockerfile
    ports:
      - "8300:8300"  # HTTP API
      - "9300:9300"  # Prometheus metrics
    environment:
      - SYNK_HOST=0.0.0.0
      - SYNK_PORT=8300
      - REDIS_URL=redis://redis:6379
      - SOLANA_CLUSTER=devnet
      - SOLANA_RPC_URL=https://api.devnet.solana.com
      - SOLANA_WS_URL=wss://api.devnet.solana.com
      - SYNC_INTERVAL_MS=1000
      - ENABLE_REAL_TIME=true
      - PROMETHEUS_PORT=9300
      - TRACING_LEVEL=info
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üõ°Ô∏è Chainguardia - Advanced Security Monitoring
  chainguardia:
    build:
      context: ./services/chainguardia
      dockerfile: Dockerfile
    ports:
      - "8400:8400"  # HTTP API
      - "9400:9400"  # Prometheus metrics
    environment:
      - GUARDIA_HOST=0.0.0.0
      - GUARDIA_PORT=8400
      - REDIS_URL=redis://redis:6379
      - THREAT_DETECTION_ENABLED=true
      - ANOMALY_DETECTION_ENABLED=true
      - WALLET_MONITORING_ENABLED=true
      - COMPLIANCE_CHECKING_ENABLED=true
      - THREAT_THRESHOLD=0.7
      - ANOMALY_THRESHOLD=0.95
      - PROMETHEUS_PORT=9400
      - TRACING_LEVEL=info
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8400/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ‚ö° Performance Optimizer - Ultra-Low Latency & High Accuracy
  performance-optimizer:
    build:
      context: ./services/performance-optimizer
      dockerfile: Dockerfile
    ports:
      - "8500:8500"  # HTTP API
      - "9500:9500"  # Prometheus metrics
    environment:
      - OPTIMIZER_HOST=0.0.0.0
      - OPTIMIZER_PORT=8500
      - REDIS_URL=redis://redis:6379
      - TARGET_LATENCY_MS=100
      - TARGET_ACCURACY=0.848
      - TARGET_THROUGHPUT=1000
      - ENABLE_CACHING=true
      - ENABLE_LOAD_BALANCING=true
      - ENABLE_ML_OPTIMIZATION=true
      - MAX_CACHE_SIZE_MB=1024
      - PROMETHEUS_PORT=9500
      - TRACING_LEVEL=info
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üîê Security Hardening - Enterprise Security Suite
  security-hardening:
    build:
      context: ./services/security-hardening
      dockerfile: Dockerfile
    ports:
      - "8600:8600"  # HTTP API
      - "9600:9600"  # Prometheus metrics
    environment:
      - SECURITY_HOST=0.0.0.0
      - SECURITY_PORT=8600
      - HSM_PROVIDER=SoftHSM
      - HSM_PIN=1234
      - JWT_SECRET=${JWT_SECRET:-cerberus_jwt_secret_2024}
      - MULTISIG_THRESHOLD=3
      - ENABLE_ZERO_TRUST=true
      - ENABLE_THREAT_DETECTION=true
      - ENABLE_COMPLIANCE_MONITORING=true
      - PROMETHEUS_PORT=9600
      - TRACING_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8600/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üìä Advanced Monitoring - Enterprise Observability Suite
  advanced-monitoring:
    build:
      context: ./services/advanced-monitoring
      dockerfile: Dockerfile
    ports:
      - "8700:8700"  # HTTP API
      - "9700:9700"  # Prometheus metrics
    environment:
      - MONITORING_HOST=0.0.0.0
      - MONITORING_PORT=8700
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - INFLUXDB_URL=http://influxdb:8086
      - ENABLE_DISTRIBUTED_TRACING=true
      - ENABLE_ANOMALY_DETECTION=true
      - ENABLE_REAL_TIME_ALERTING=true
      - ENABLE_PERFORMANCE_ANALYSIS=true
      - SAMPLING_RATE=0.1
      - SENSITIVITY_THRESHOLD=0.8
      - PROMETHEUS_PORT=9700
      - TRACING_LEVEL=info
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üîç Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  vault_data:
