# üê∫ Cerberus Phoenix Evolved - Complete Infrastructure
# Production-ready stack with Vault, Qdrant, Kestra, and all services

version: '3.8'

networks:
  cerberus-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  vault-data:
  qdrant-data:
  postgres-data:
  kestra-data:
  prometheus-data:
  grafana-data:

services:
  # üîê HashiCorp Vault - Secret Management
  vault:
    image: hashicorp/vault:1.15
    container_name: cerberus-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "cerberus-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_ADDR: "http://0.0.0.0:8200"
    volumes:
      - vault-data:/vault/data
      - ./vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîç Qdrant - Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: cerberus-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.20
# Health check disabled - no curl/wget in qdrant image
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:6333/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # üêò PostgreSQL - Persistent Storage
  postgres:
    image: postgres:16-alpine
    container_name: cerberus-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: cerberus
      POSTGRES_USER: cerberus
      POSTGRES_PASSWORD: cerberus-secure-password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cerberus"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîÑ Kestra - Workflow Orchestration
  kestra:
    image: kestra/kestra:latest
    container_name: cerberus-kestra
    restart: unless-stopped
    command: server standalone
    ports:
      - "8080:8080"
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/cerberus
            driverClassName: org.postgresql.Driver
            username: cerberus
            password: cerberus-secure-password
        kestra:
          server:
            basic-auth:
              enabled: false
          repository:
            type: postgres
          queue:
            type: postgres
    volumes:
      - kestra-data:/app/storage
      - ./kestra/flows:/app/flows
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.40
    # Health check disabled - distroless image has no shell tools
    # healthcheck:
    #   test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8080'"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # ü•∑ HFT Ninja - Execution Engine
  hft-ninja:
    build:
      context: ../
      dockerfile: services/hft-ninja/Dockerfile
    container_name: cerberus-hft-ninja
    restart: unless-stopped
    ports:
      - "8090:8080"
    environment:
      RUST_LOG: info
      PORT: 8080
      SOLANA_RPC_URL: "https://api.devnet.solana.com"
      VAULT_URL: "http://vault:8200"
      VAULT_TOKEN: "cerberus-root-token"
      VAULT_ENABLED: "true"
    volumes:
      - ./logs/hft-ninja:/app/logs
    depends_on:
      vault:
        condition: service_healthy
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.50
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üß† Cerebro BFF - AI Decision API
  cerebro-bff:
    build:
      context: ../
      dockerfile: services/cerebro-bff/Dockerfile
    container_name: cerberus-cerebro-bff
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      RUST_LOG: info
      PORT: 3000
      HFT_NINJA_URL: "http://hft-ninja:8080"
      QDRANT_URL: "http://qdrant:6333"
      AI_CONFIDENCE_THRESHOLD: "0.7"
    volumes:
      - ./logs/cerebro-bff:/app/logs
    depends_on:
      - qdrant
      - hft-ninja
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.60
    # Health check disabled - distroless image has no shell tools
    # healthcheck:
    #   test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/3000'"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # üìä Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: cerberus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.70

  # üìà Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: cerberus-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: cerberus-admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.80

  # üåê Traefik - Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: cerberus-traefik
    restart: unless-stopped
    ports:
      - "8082:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      cerberus-net:
        ipv4_address: 172.20.0.90
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
