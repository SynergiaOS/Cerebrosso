# üöÄ Cerberus Phoenix v2.0 - Production Deployment
# Complete HFT trading bot with monitoring and security

version: '3.8'

networks:
  cerberus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  qdrant_data:
  grafana_data:
  prometheus_data:
  vault_data:

services:
  # üóÑÔ∏è Core Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: cerberus-postgres
    environment:
      POSTGRES_DB: cerberus
      POSTGRES_USER: cerberus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql:/docker-entrypoint-initdb.d
    networks:
      - cerberus-network
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cerberus"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîç Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cerberus-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - cerberus-network
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  # üîê Secrets Management (Vault)
  vault:
    image: hashicorp/vault:latest
    container_name: cerberus-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config
    networks:
      - cerberus-network
    ports:
      - "8200:8200"
    restart: unless-stopped
    command: vault server -dev -dev-root-token-id=${VAULT_ROOT_TOKEN}

  # üìä Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: cerberus-prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - cerberus-network
    ports:
      - "9090:9090"
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: cerberus-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cerberus-network
    ports:
      - "3001:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  # üåê Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: cerberus-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cerberus-network
    ports:
      - "80:80"
      - "443:443"
      - "8082:8080"
    restart: unless-stopped

  # üß† Cerebro-BFF (AI Decision Engine)
  cerebro-bff:
    build:
      context: ./services/cerebro-bff
      dockerfile: Dockerfile
    container_name: cerberus-cerebro-bff
    environment:
      RUST_LOG: info
      PORT: 3000
      QDRANT_URL: http://qdrant:6333
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
      POSTGRES_URL: postgresql://cerberus:${POSTGRES_PASSWORD}@postgres:5432/cerberus
      # Infisical Configuration
      INFISICAL_API_URL: ${INFISICAL_API_URL}
      INFISICAL_PROJECT_ID: ${INFISICAL_PROJECT_ID}
      INFISICAL_ENVIRONMENT: ${INFISICAL_ENVIRONMENT}
      INFISICAL_CLIENT_ID: ${INFISICAL_CLIENT_ID}
      INFISICAL_CLIENT_SECRET: ${INFISICAL_CLIENT_SECRET}
    networks:
      - cerberus-network
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - postgres
      - qdrant
      - vault
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cerebro-bff.rule=Host(`cerebro.localhost`)"
      - "traefik.http.services.cerebro-bff.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚ö° HFT-Ninja (High-Frequency Trading Engine)
  hft-ninja:
    build:
      context: ./services/hft-ninja
      dockerfile: Dockerfile
    container_name: cerberus-hft-ninja
    environment:
      RUST_LOG: info
      PORT: 8090
      CEREBRO_BFF_URL: http://cerebro-bff:3000
      # RPC Configuration
      HELIUS_API_KEY: ${HELIUS_API_KEY}
      QUICKNODE_API_KEY: ${QUICKNODE_API_KEY}
      JITO_API_KEY: ${JITO_API_KEY}
      # Trading Configuration
      MAX_POSITION_SIZE_SOL: ${MAX_POSITION_SIZE_SOL:-1.0}
      DAILY_LOSS_LIMIT_SOL: ${DAILY_LOSS_LIMIT_SOL:-10.0}
      EMERGENCY_STOP_PERCENTAGE: ${EMERGENCY_STOP_PERCENTAGE:-25.0}
    networks:
      - cerberus-network
    ports:
      - "8090:8090"
    restart: unless-stopped
    depends_on:
      - cerebro-bff
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hft-ninja.rule=Host(`hft.localhost`)"
      - "traefik.http.services.hft-ninja.loadbalancer.server.port=8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ü§ñ Discord Bot (Monitoring & Alerts)
  discord-bot:
    build:
      context: ./services/discord-bot
      dockerfile: Dockerfile
    container_name: cerberus-discord-bot
    environment:
      RUST_LOG: info
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      DISCORD_CHANNEL_ID: ${DISCORD_CHANNEL_ID}
      HFT_NINJA_URL: http://hft-ninja:8090
      CEREBRO_BFF_URL: http://cerebro-bff:3000
      PROMETHEUS_URL: http://prometheus:9090
    networks:
      - cerberus-network
    restart: unless-stopped
    depends_on:
      - hft-ninja
      - cerebro-bff
      - prometheus

  # üì± Telegram Bot (Alternative Monitoring)
  telegram-bot:
    build:
      context: ./services/telegram-bot
      dockerfile: Dockerfile
    container_name: cerberus-telegram-bot
    environment:
      RUST_LOG: info
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      HFT_NINJA_URL: http://hft-ninja:8090
      CEREBRO_BFF_URL: http://cerebro-bff:3000
    networks:
      - cerberus-network
    restart: unless-stopped
    depends_on:
      - hft-ninja
      - cerebro-bff

  # üîî Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: cerberus-alertmanager
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - cerberus-network
    ports:
      - "9093:9093"
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  # üîÑ Workflow Orchestration
  kestra:
    image: kestra/kestra:latest
    container_name: cerberus-kestra
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/cerberus
            username: cerberus
            password: ${POSTGRES_PASSWORD}
    networks:
      - cerberus-network
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - postgres

  # üìä Web Dashboard (Optional)
  web-dashboard:
    build:
      context: ./services/web-dashboard
      dockerfile: Dockerfile
    container_name: cerberus-web-dashboard
    environment:
      REACT_APP_HFT_NINJA_URL: http://localhost:8090
      REACT_APP_CEREBRO_BFF_URL: http://localhost:3000
      REACT_APP_GRAFANA_URL: http://localhost:3001
    networks:
      - cerberus-network
    ports:
      - "3002:3000"
    restart: unless-stopped
    depends_on:
      - hft-ninja
      - cerebro-bff
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3000"
