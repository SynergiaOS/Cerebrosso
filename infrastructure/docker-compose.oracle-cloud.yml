# ü•∑ Cerberus Phoenix v2.0 - Oracle Cloud Production Deployment
# Optimized for Oracle Cloud Free Tier (4 OCPU, 24GB RAM)

version: '3.8'

networks:
  cerberus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

services:
  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cerberus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cerberus}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cerberus-redis
    restart: unless-stopped
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîç Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cerberus-qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîí HashiCorp Vault
  vault:
    image: vault:latest
    container_name: cerberus-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./secrets/vault-config.hcl:/vault/config/vault.hcl:ro
    ports:
      - "8201:8200"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cerberus-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìà Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cerberus-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://${WEBHOOK_BASE_URL:-localhost}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê Traefik Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: cerberus-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ALERT_EMAIL:-admin@localhost}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    ports:
      - "8082:8080"
      - "80:80"
      - "443:443"
    networks:
      - cerberus-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # üß† Cerebro-BFF (Backend for Frontend)
  cerebro-bff:
    build:
      context: ../services/cerebro-bff
      dockerfile: Dockerfile
    image: cerberus/cerebro-bff:oracle-cloud
    container_name: cerberus-cerebro-bff
    restart: unless-stopped
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-cerberus}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - VAULT_URL=${VAULT_URL:-http://vault:8200}
      - VAULT_TOKEN=${VAULT_TOKEN}
      - HELIUS_API_KEY=${HELIUS_API_KEY}
      - QUICKNODE_API_KEY=${QUICKNODE_API_KEY}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - GENESYS_API_KEY=${GENESYS_API_KEY}
      - RPC_ROUTING_STRATEGY=${RPC_ROUTING_STRATEGY:-cost_optimized}
      - API_USAGE_ALERT_THRESHOLD=${API_USAGE_ALERT_THRESHOLD:-0.8}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL}
    ports:
      - "3000:3000"
    networks:
      - cerberus-network
    depends_on:
      - postgres
      - redis
      - qdrant
      - vault
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cerebro-bff.rule=PathPrefix(`/api/`) || PathPrefix(`/webhooks/`) || Path(`/health`)"
      - "traefik.http.routers.cerebro-bff.entrypoints=websecure"
      - "traefik.http.routers.cerebro-bff.tls.certresolver=letsencrypt"

  # ü•∑ HFT-Ninja (High-Frequency Trading Engine)
  hft-ninja:
    build:
      context: ../services/hft-ninja
      dockerfile: Dockerfile
    image: cerberus/hft-ninja:oracle-cloud
    container_name: cerberus-hft-ninja
    restart: unless-stopped
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-cerberus}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - VAULT_URL=${VAULT_URL:-http://vault:8200}
      - VAULT_TOKEN=${VAULT_TOKEN}
      - CEREBRO_BFF_URL=http://cerebro-bff:3000
      - DEFAULT_RISK_TOLERANCE=${DEFAULT_RISK_TOLERANCE:-0.7}
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-0.1}
    ports:
      - "8090:8090"
    networks:
      - cerberus-network
    depends_on:
      - postgres
      - redis
      - vault
      - cerebro-bff
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
