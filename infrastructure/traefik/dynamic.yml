# üê∫ Projekt Cerberus Phoenix v2.0 - Traefik Dynamic Configuration

# üîí TLS Configuration
tls:
  options:
    default:
      minVersion: "VersionTLS12"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

# üåê HTTP Configuration
http:
  # üîÑ Middlewares
  middlewares:
    # Security Headers
    security-headers:
      headers:
        accessControlAllowMethods:
          - GET
          - OPTIONS
          - PUT
          - POST
          - DELETE
        accessControlAllowOriginList:
          - "http://localhost:3000"
          - "http://dashboard.localhost"
        accessControlMaxAge: 100
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        referrerPolicy: "same-origin"
        customRequestHeaders:
          X-Forwarded-Proto: "https"

    # Rate Limiting - General
    rate-limit:
      rateLimit:
        average: 100
        burst: 200
        period: 1m

    # Rate Limiting - API Heavy
    rate-limit-api:
      rateLimit:
        average: 50
        burst: 100
        period: 1m

    # Rate Limiting - Trading Critical
    rate-limit-trading:
      rateLimit:
        average: 1000
        burst: 2000
        period: 1m

    # Authentication (for production)
    auth:
      basicAuth:
        users:
          - "admin:$2y$10$..."  # Replace with actual hash

    # IP Whitelist (for production)
    ip-whitelist:
      ipWhiteList:
        sourceRange:
          - "127.0.0.1/32"
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"

    # Circuit Breaker
    circuit-breaker:
      circuitBreaker:
        expression: "NetworkErrorRatio() > 0.3 || ResponseCodeRatio(500, 600, 0, 600) > 0.3"

    # CORS
    cors:
      headers:
        accessControlAllowCredentials: true
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Requested-With"
        accessControlAllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
          - "OPTIONS"
        accessControlAllowOriginList:
          - "http://localhost:3000"
          - "http://dashboard.localhost"
        accessControlMaxAge: 86400

    # Compression
    compression:
      compress: {}

    # Strip Prefix
    strip-api-prefix:
      stripPrefix:
        prefixes:
          - "/api"

  # üõ£Ô∏è Routers
  routers:
    # Dashboard Router
    dashboard:
      rule: "Host(`dashboard.localhost`) || Host(`localhost`)"
      service: dashboard
      middlewares:
        - security-headers
        - cors
        - compression

    # Cerebro BFF Router
    cerebro-api:
      rule: "Host(`cerebro.localhost`) || PathPrefix(`/api/cerebro`)"
      service: cerebro-bff
      middlewares:
        - security-headers
        - cors
        - rate-limit
        - strip-api-prefix

    # HFT Ninja Router
    ninja-api:
      rule: "Host(`ninja.localhost`) || PathPrefix(`/api/ninja`)"
      service: hft-ninja
      middlewares:
        - security-headers
        - cors
        - rate-limit
        - strip-api-prefix

    # Monitoring Routes
    prometheus:
      rule: "Host(`prometheus.localhost`)"
      service: prometheus
      middlewares:
        - security-headers

    grafana:
      rule: "Host(`grafana.localhost`)"
      service: grafana
      middlewares:
        - security-headers

    qdrant:
      rule: "Host(`qdrant.localhost`)"
      service: qdrant
      middlewares:
        - security-headers
        - rate-limit

    kestra:
      rule: "Host(`kestra.localhost`)"
      service: kestra
      middlewares:
        - security-headers

    # Vault Router (Admin only)
    vault:
      rule: "Host(`vault.localhost`)"
      service: vault
      middlewares:
        - security-headers
        - ip-whitelist
        - rate-limit-api

    # FinLlama Router
    finllama:
      rule: "Host(`finllama.localhost`)"
      service: finllama
      middlewares:
        - security-headers
        - rate-limit-api

    # Deepseek Router
    deepseek:
      rule: "Host(`deepseek.localhost`)"
      service: deepseek
      middlewares:
        - security-headers
        - rate-limit-api

    # Oumi Router
    oumi:
      rule: "Host(`oumi.localhost`)"
      service: oumi
      middlewares:
        - security-headers
        - rate-limit-trading
        - circuit-breaker

    # Scrapy Router
    scrapy:
      rule: "Host(`scrapy.localhost`)"
      service: scrapy
      middlewares:
        - security-headers
        - rate-limit

  # üéØ Services
  services:
    dashboard:
      loadBalancer:
        servers:
          - url: "http://dashboard:3000"
        healthCheck:
          path: "/api/health"
          interval: "30s"
          timeout: "10s"

    cerebro-bff:
      loadBalancer:
        servers:
          - url: "http://cerebro-bff:8080"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"

    hft-ninja:
      loadBalancer:
        servers:
          - url: "http://hft-ninja:8080"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"

    prometheus:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"

    grafana:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"

    qdrant:
      loadBalancer:
        servers:
          - url: "http://qdrant:6333"

    kestra:
      loadBalancer:
        servers:
          - url: "http://kestra:8080"

    vault:
      loadBalancer:
        servers:
          - url: "http://vault:8200"
        healthCheck:
          path: "/v1/sys/health"
          interval: "30s"
          timeout: "10s"

    finllama:
      loadBalancer:
        servers:
          - url: "http://finllama:11434"
        healthCheck:
          path: "/api/tags"
          interval: "60s"
          timeout: "15s"

    deepseek:
      loadBalancer:
        servers:
          - url: "http://deepseek:11434"
        healthCheck:
          path: "/api/tags"
          interval: "60s"
          timeout: "15s"

    oumi:
      loadBalancer:
        servers:
          - url: "http://oumi:8080"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"

    scrapy:
      loadBalancer:
        servers:
          - url: "http://scrapy:8080"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"
