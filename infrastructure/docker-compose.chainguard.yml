# üõ°Ô∏è Cerberus Phoenix v2.0 - Chainguard Secured Docker Compose
# Ultra-secure infrastructure with Chainguard distroless images

version: '3.8'

networks:
  cerberus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  qdrant_data:
  vault_data:
  prometheus_data:
  grafana_data:
  finllama_data:
  deepseek_data:

services:
  # üö™ Traefik - API Gateway & Load Balancer (Chainguard)
  traefik:
    image: cgr.dev/chainguard/traefik:latest
    container_name: cerberus-traefik-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "8000:80"
      - "8443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    networks:
      - cerberus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # üß† Qdrant - Vector Database (Chainguard)
  qdrant:
    image: cgr.dev/chainguard/qdrant:latest
    container_name: cerberus-qdrant-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - cerberus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.localhost`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"

  # üóÑÔ∏è PostgreSQL - Database (Chainguard)
  postgres:
    image: cgr.dev/chainguard/postgres:latest
    container_name: cerberus-postgres-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: ${POSTGRES_USER:-kestra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kestra}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cerberus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kestra}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üîê HashiCorp Vault - Secret Management (Chainguard)
  vault:
    image: cgr.dev/chainguard/vault:latest
    container_name: cerberus-vault-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./secrets/vault-config.hcl:/vault/config/vault.hcl:ro
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {"file": {"path": "/vault/data"}},
          "listener": {"tcp": {"address": "0.0.0.0:8200", "tls_disable": true}},
          "ui": true,
          "disable_mlock": true
        }
    cap_add:
      - IPC_LOCK
    networks:
      - cerberus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.localhost`)"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"

  # üìä Prometheus - Metrics Collection (Chainguard)
  prometheus:
    image: cgr.dev/chainguard/prometheus:latest
    container_name: cerberus-prometheus-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - cerberus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # üìà Grafana - Monitoring Dashboard (Chainguard)
  grafana:
    image: cgr.dev/chainguard/grafana:latest
    container_name: cerberus-grafana-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/lib/grafana/plugins:noexec,nosuid,size=100m
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
    networks:
      - cerberus-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # üê∫ HFT-Ninja - High-Frequency Trading Engine (Chainguard Secured)
  hft-ninja:
    build:
      context: ../services/hft-ninja
      dockerfile: Dockerfile.chainguard
    container_name: cerberus-hft-ninja-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "8090:8090"
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      SOLANA_RPC_URL: ${SOLANA_RPC_URL}
      QUICKNODE_RPC_URL: ${QUICKNODE_RPC_URL}
      HELIUS_API_KEY: ${HELIUS_API_KEY}
      NVIDIA_NEMOTRON_URL: ${NVIDIA_NEMOTRON_URL:-http://nemotron:11434}
    networks:
      - cerberus-network
    depends_on:
      - prometheus
      - qdrant
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hft-ninja.rule=Host(`hft-ninja.localhost`)"
      - "traefik.http.services.hft-ninja.loadbalancer.server.port=8090"

  # üß† Cerebro-BFF - AI Orchestration Engine (Chainguard Secured)
  cerebro-bff:
    build:
      context: ../services/cerebro-bff
      dockerfile: Dockerfile.chainguard
    container_name: cerberus-cerebro-bff-secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ports:
      - "8081:8081"
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-kestra}:${POSTGRES_PASSWORD:-kestra}@postgres:5432/kestra
      QDRANT_URL: http://qdrant:6333
      HELIUS_API_KEY: ${HELIUS_API_KEY}
      QUICKNODE_API_KEY: ${QUICKNODE_API_KEY}
      BIRDEYE_API_KEY: ${BIRDEYE_API_KEY}
      FINLLAMA_API_URL: http://finllama:11434
      DEEPSEEK_API_URL: http://deepseek:11434
    networks:
      - cerberus-network
    depends_on:
      - postgres
      - qdrant
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cerebro-bff.rule=Host(`cerebro-bff.localhost`)"
      - "traefik.http.services.cerebro-bff.loadbalancer.server.port=8081"
