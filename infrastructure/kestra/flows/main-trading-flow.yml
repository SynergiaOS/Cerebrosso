# üê∫ Projekt Cerberus Phoenix v2.0 - Main Trading Flow
# G≈Ç√≥wny przep≈Çyw orkiestrujƒÖcy ca≈Çy cykl tradingowy

id: main-trading-flow
namespace: cerberus.trading

description: |
  G≈Ç√≥wny przep≈Çyw Cerberus Phoenix v2.0 orkiestrujƒÖcy:
  - Zbieranie danych z zewnƒôtrznych ≈∫r√≥de≈Ç
  - Kontekstualizacjƒô przez AI
  - Wykrywanie sygna≈Ç√≥w tradingowych
  - Egzekucjƒô transakcji
  - Uczenie siƒô z wynik√≥w

labels:
  project: cerberus-phoenix
  version: "2.0"
  environment: production

# ‚è∞ Harmonogram - uruchamianie co 30 sekund
triggers:
  - id: schedule
    type: io.kestra.core.models.triggers.types.Schedule
    cron: "*/30 * * * * *"  # Co 30 sekund
    timezone: "Europe/Warsaw"

# üìä Zmienne globalne
variables:
  solana_rpc_url: "{{ secret('SOLANA_RPC_URL') }}"
  cerebro_api_url: "http://cerebro-bff:8080"
  ninja_api_url: "http://hft-ninja:8080"
  qdrant_url: "http://qdrant:6333"

tasks:
  # üîç FAZA 1: Zbieranie Danych
  - id: collect-market-data
    type: io.kestra.core.tasks.flows.Parallel
    description: "R√≥wnoleg≈Çe zbieranie danych z r√≥≈ºnych ≈∫r√≥de≈Ç"
    tasks:
      # üìà Dane z Oumi
      - id: fetch-oumi-data
        type: io.kestra.plugin.core.http.Request
        uri: "https://api.oumi.com/v1/pools"
        method: GET
        headers:
          User-Agent: "Cerberus-Phoenix/2.0"
        timeout: PT10S
        
      # üåä Dane z Jupiter
      - id: fetch-jupiter-data
        type: io.kestra.plugin.core.http.Request
        uri: "https://quote-api.jup.ag/v6/quote"
        method: GET
        headers:
          User-Agent: "Cerberus-Phoenix/2.0"
        timeout: PT10S
        
      # üìä Dane z Birdeye
      - id: fetch-birdeye-data
        type: io.kestra.plugin.core.http.Request
        uri: "https://public-api.birdeye.so/defi/tokenlist"
        method: GET
        headers:
          User-Agent: "Cerberus-Phoenix/2.0"
          X-API-KEY: "{{ secret('BIRDEYE_API_KEY') }}"
        timeout: PT10S

  # üß† FAZA 2: Kontekstualizacja AI
  - id: contextualize-data
    type: io.kestra.plugin.core.http.Request
    description: "Wys≈Çanie danych do Cerebro-BFF w celu kontekstualizacji"
    uri: "{{ vars.cerebro_api_url }}/api/v1/contextualize"
    method: POST
    contentType: application/json
    body: |
      {
        "oumi_data": {{ outputs.collect-market-data.fetch-oumi-data.body | json }},
        "jupiter_data": {{ outputs.collect-market-data.fetch-jupiter-data.body | json }},
        "birdeye_data": {{ outputs.collect-market-data.fetch-birdeye-data.body | json }},
        "timestamp": "{{ now() }}"
      }
    timeout: PT30S

  # üéØ FAZA 3: Wykrywanie Sygna≈Ç√≥w
  - id: detect-signals
    type: io.kestra.plugin.core.http.Request
    description: "Wykrywanie sygna≈Ç√≥w tradingowych przez HFT-Ninja"
    uri: "{{ vars.ninja_api_url }}/api/v1/signals/detect"
    method: POST
    contentType: application/json
    body: |
      {
        "context_id": "{{ outputs.contextualize-data.body.context_id }}",
        "strategies": ["sandwich", "arbitrage", "piranha_surf"],
        "risk_level": "medium"
      }
    timeout: PT15S

  # ü§ñ FAZA 4: Decyzja AI
  - id: ai-decision
    type: io.kestra.core.tasks.flows.If
    description: "Podejmowanie decyzji przez AI je≈õli wykryto sygna≈Çy"
    condition: "{{ outputs.detect-signals.body.signals | length > 0 }}"
    then:
      - id: get-ai-decision
        type: io.kestra.plugin.core.http.Request
        uri: "{{ vars.cerebro_api_url }}/api/v1/decide"
        method: POST
        contentType: application/json
        body: |
          {
            "signals": {{ outputs.detect-signals.body.signals | json }},
            "context_id": "{{ outputs.contextualize-data.body.context_id }}",
            "risk_tolerance": 0.02,
            "max_position_size": 1.0
          }
        timeout: PT20S

  # ‚ö° FAZA 5: Egzekucja Transakcji
  - id: execute-trades
    type: io.kestra.core.tasks.flows.If
    description: "Egzekucja transakcji je≈õli AI da≈Ça zielone ≈õwiat≈Ço"
    condition: "{{ outputs.ai-decision.get-ai-decision.body.action == 'execute' }}"
    then:
      - id: execute-transaction
        type: io.kestra.plugin.core.http.Request
        uri: "{{ vars.ninja_api_url }}/api/v1/execute"
        method: POST
        contentType: application/json
        body: |
          {
            "decision": {{ outputs.ai-decision.get-ai-decision.body | json }},
            "execution_mode": "jito_bundle",
            "priority_fee": "auto",
            "slippage_tolerance": 0.005
          }
        timeout: PT60S

  # üìä FAZA 6: Monitoring i Feedback
  - id: monitor-execution
    type: io.kestra.core.tasks.flows.If
    description: "Monitorowanie wykonania i zbieranie feedbacku"
    condition: "{{ outputs.execute-trades.execute-transaction.body.transaction_id is defined }}"
    then:
      - id: track-transaction
        type: io.kestra.plugin.core.http.Request
        uri: "{{ vars.ninja_api_url }}/api/v1/track/{{ outputs.execute-trades.execute-transaction.body.transaction_id }}"
        method: GET
        timeout: PT30S
        
      - id: send-feedback
        type: io.kestra.plugin.core.http.Request
        uri: "{{ vars.cerebro_api_url }}/api/v1/feedback"
        method: POST
        contentType: application/json
        body: |
          {
            "context_id": "{{ outputs.contextualize-data.body.context_id }}",
            "decision_id": "{{ outputs.ai-decision.get-ai-decision.body.decision_id }}",
            "transaction_result": {{ outputs.monitor-execution.track-transaction.body | json }},
            "timestamp": "{{ now() }}"
          }
        timeout: PT15S

# üö® Error Handling
errors:
  - id: handle-errors
    type: io.kestra.core.tasks.log.Log
    message: "‚ùå B≈ÇƒÖd w g≈Ç√≥wnym przep≈Çywie: {{ task.id }} - {{ task.exception.message }}"
    level: ERROR

# üìä Metryki i Alerty
listeners:
  - conditions:
      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition
        in:
          - FAILED
          - WARNING
    tasks:
      - id: alert-on-failure
        type: io.kestra.plugin.core.http.Request
        uri: "{{ vars.cerebro_api_url }}/api/v1/alerts"
        method: POST
        contentType: application/json
        body: |
          {
            "type": "execution_failure",
            "flow_id": "{{ flow.id }}",
            "execution_id": "{{ execution.id }}",
            "error": "{{ task.exception.message }}",
            "timestamp": "{{ now() }}"
          }
