# 🚀 Cerberus Phoenix v3.0 - CI/CD Pipeline
# Enterprise-grade CI/CD with automated testing, security scanning, and deployment

name: 🐝 Hive Mind CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Security Analysis
  code-analysis:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: 📋 Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🎨 Check formatting
        run: cargo fmt --all -- --check

      - name: 📎 Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: 🔐 Security audit
        run: |
          cargo install cargo-audit
          cargo audit

      - name: 🕵️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: rust

      - name: 🏗️ Build for analysis
        run: cargo build --release

      - name: 🕵️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 🧪 Comprehensive Testing
  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: code-analysis
    strategy:
      matrix:
        rust: [stable, beta]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: 🐳 Start test infrastructure
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres redis qdrant
          sleep 30

      - name: 🧪 Run unit tests
        run: cargo test --all --verbose

      - name: 🔗 Run integration tests
        run: cargo test --test integration --verbose

      - name: 📊 Generate coverage report
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out xml --output-dir coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/cobertura.xml
          fail_ci_if_error: true

      - name: 🧹 Cleanup test infrastructure
        run: docker-compose -f docker-compose.test.yml down

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [code-analysis, testing]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🔐 Security Scanning
  security-scan:
    name: 🔐 Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🛡️ Container security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/tmp aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            ${{ needs.build.outputs.image-tag }}

  # 🚀 Staging Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.cerberus-phoenix.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 📋 Update kubeconfig
        run: aws eks update-kubeconfig --name cerberus-staging --region us-west-2

      - name: 🚀 Deploy to staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/cerberus-hive-mind -n staging
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

      - name: 🧪 Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=cerberus-hive-mind -n staging --timeout=300s
          ./scripts/smoke-tests.sh staging

  # 🎯 Canary Deployment
  deploy-canary:
    name: 🎯 Canary Deployment
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-canary
      url: https://canary.cerberus-phoenix.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 📋 Update kubeconfig
        run: aws eks update-kubeconfig --name cerberus-production --region us-west-2

      - name: 🎯 Deploy canary (10% traffic)
        run: |
          envsubst < k8s/production/canary-deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/cerberus-hive-mind-canary -n production
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

      - name: 📊 Monitor canary metrics
        run: ./scripts/monitor-canary.sh

      - name: ✅ Validate canary deployment
        run: ./scripts/validate-canary.sh

  # 🚀 Production Deployment
  deploy-production:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-canary]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://cerberus-phoenix.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 📋 Update kubeconfig
        run: aws eks update-kubeconfig --name cerberus-production --region us-west-2

      - name: 🚀 Rolling deployment to production
        run: |
          envsubst < k8s/production/deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/cerberus-hive-mind -n production --timeout=600s
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

      - name: 🧪 Run production health checks
        run: ./scripts/production-health-check.sh

      - name: 📊 Update monitoring dashboards
        run: ./scripts/update-dashboards.sh

      - name: 🎯 Remove canary deployment
        run: kubectl delete deployment cerberus-hive-mind-canary -n production

  # 📢 Notification
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#cerberus-deployments'
          text: |
            🐝 Hive Mind Deployment ${{ job.status }}!
            🚀 Version: ${{ github.sha }}
            🌍 Environment: Production
            📊 Dashboard: https://grafana.cerberus-phoenix.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
