# 🐺 Projekt Cerberus Phoenix v2.0 - CI/CD Pipeline
name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🧪 Testing
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 🧪 Run tests - HFT Ninja
      run: |
        cd services/hft-ninja
        cargo test --verbose
        
    - name: 🧪 Run tests - Cerebro BFF
      run: |
        cd services/cerebro-bff
        cargo test --verbose

  # 🔍 Code Quality
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: 🎨 Check formatting
      run: |
        cd services/hft-ninja && cargo fmt -- --check
        cd services/cerebro-bff && cargo fmt -- --check
        
    - name: 🔍 Clippy linting
      run: |
        cd services/hft-ninja && cargo clippy -- -D warnings
        cd services/cerebro-bff && cargo clippy -- -D warnings

  # 🔐 Security
  security:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: 🔐 Install cargo-audit
      run: cargo install cargo-audit
      
    - name: 🔐 Security audit - HFT Ninja
      run: |
        cd services/hft-ninja
        cargo audit
        
    - name: 🔐 Security audit - Cerebro BFF
      run: |
        cd services/cerebro-bff
        cargo audit

  # 🏗️ Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 🏗️ Build HFT Ninja
      run: |
        cd services/hft-ninja
        cargo build --release
        
    - name: 🏗️ Build Cerebro BFF
      run: |
        cd services/cerebro-bff
        cargo build --release

  # 🐳 Docker Build
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Build and push Docker images
      run: |
        cd infrastructure
        docker-compose build
        docker-compose push

  # 📊 Performance Tests
  performance:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: 📊 Run benchmarks
      run: |
        cd services/hft-ninja
        cargo bench
        cd ../cerebro-bff
        cargo bench

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # TODO: Implement staging deployment

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # TODO: Implement production deployment
